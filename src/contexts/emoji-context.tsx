import { createContext, FC, ReactNode, useCallback, useContext } from 'react';
// Import the new map generated by the script
import { emojiImageMap } from '../components/emoji-map'; // Use .ts extension implicitly

// Define the shape of the context data
interface EmojiContextType {
  parseEmoji: (text: string) => string; // Function to parse text into string (potentially containing HTML)
}

// Create a default context value
const defaultEmojiContextValue: EmojiContextType = {
  parseEmoji: (text: string) => text,
};

// Create the context
const EmojiContext = createContext<EmojiContextType>(defaultEmojiContextValue);

interface EmojiProviderProps {
  children: ReactNode;
}

// Regex to find Slack-style emoji codes (matches keys in emojiImageMap)
const emojiRegex = /:([a-zA-Z0-9_+-]+):/g;

// Create the provider component
export const EmojiProvider: FC<EmojiProviderProps> = ({ children }) => {
  const parseEmoji = useCallback((text: string): string => {
    if (!text) {
      return ''; // Return empty string for null/undefined/empty input
    }
    // Use the new emojiImageMap
    return text.replace(emojiRegex, (match, code: string) => {
      // The map key is the full Slack code (e.g., ":smile:")
      const imagePath = emojiImageMap[match];
      if (typeof imagePath === 'string' && imagePath.length > 0) {
        // Use the path from the map (e.g., /node_modules/.../1f604.png)
        return `<img src="${imagePath}" alt="${code}" class="emoji-image" />`;
      }
      return match; // Otherwise keep original code
    });
  }, []);

  // Value object provided by the context
  const value: EmojiContextType = {
    parseEmoji,
  };

  return (
    <EmojiContext.Provider value={value}>{children}</EmojiContext.Provider>
  );
};

// Custom hook to use the EmojiContext
export const useEmoji = (): EmojiContextType => useContext(EmojiContext);
