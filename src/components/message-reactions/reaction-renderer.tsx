// src/components/message-reactions/reaction-renderer.tsx
// Remove unused import from context
// import { useEmoji } from '../../contexts/emoji-context';
import { useUsers } from '../../contexts/user-context';
import { SlackReaction } from '../../types';
// Import the new map generated by the script
import { emojiImageMap } from '../emoji-map'; // Use .ts extension implicitly

// Component to render a single reaction emoji with count and user tooltip
export const ReactionRenderer = ({ reaction }: { reaction: SlackReaction }) => {
  // Remove useEmoji hook call
  // const { emojiMap } = useEmoji();
  const { getUserById } = useUsers();

  // Convert user IDs to display names for the tooltip
  const userNames = reaction.users
    .map(userId => {
      const user = getUserById(userId);
      // Prioritize display name, fallback to name, then real_name
      return (
        user?.profile.display_name ??
        user?.name ??
        user?.profile.real_name ??
        'Unknown User'
      );
    })
    .join(', '); // Join names with a comma for the tooltip

  // Look up the image path using the Slack emoji name (e.g., ":smile:")
  const mapKey = `:${reaction.name}:`;
  const imagePath = emojiImageMap[mapKey]; // Use the new map
  const tooltipText = `${userNames} reacted with :${reaction.name}:`;

  // Render the emoji image (if found) or the name as fallback, and count
  return (
    <div className="reaction-item" title={tooltipText}>
      <span className="reaction-emoji">
        {typeof imagePath === 'string' && imagePath.length > 0 ? (
          <img
            src={imagePath} // Use path from new map
            alt={reaction.name}
            className="emoji-image-reaction"
          />
        ) : (
          // Fallback to showing the name if image not found
          `:${reaction.name}:`
        )}
      </span>
      <span className="reaction-count">{reaction.count}</span>
    </div>
  );
};
